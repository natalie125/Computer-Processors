CHIP cw2{
IN indata[8], enable, load;
OUT sout, complete;
PARTS:
Bit(x=indata[0],load=load, out=x0);
Bit(x=indata[1],load=load, out=x1);
Bit(x=indata[2],load=load, out=x2);
Bit(x=indata[3],load=load, out=x3);
Bit(x=indata[4],load=load, out=x4);
Bit(x=indata[5],load=load, out=x5);
Bit(x=indata[6],load=load, out=x6);
Bit(x=indata[7],load=load, out=x7);

Mux(y=false,x=x0,sel=sel,out=Mux0);
DFF(x=Mux0,out=s0);
Mux(y=s0,x=x1,sel=sel,out=Mux1);
DFF(x=Mux1,out=s1);
Mux(y=s1,x=x2,sel=sel,out=Mux2);
DFF(x=Mux2,out=s2);
Mux(y=s2,x=x3,sel=sel,out=Mux3);
DFF(x=Mux3,out=s3);
Mux(y=s3,x=x4,sel=sel,out=Mux4);
DFF(x=Mux4,out=s4);
Mux(y=s4,x=x5,sel=sel,out=Mux5);
DFF(x=Mux5,out=s5);
Mux(y=s5,x=x6,sel=sel,out=Mux6);
DFF(x=Mux6,out=s6);
Mux(y=s6,x=x7,sel=sel,out=Mux7);
DFF(x=Mux7,out=s7);

Or8Way(x[0]=s0,x[1]=s1,x[2]=s2,x[3]=s3,x[4]=s4,x[5]=s5,x[6]=s6,x[7]=s7, out=or8out);

Not(x=load,out=notload);
Not(x=or8out,out=not8way);

Bit(x=or8out,load=enable,out=bit8or);
Bit(x=or8out,load=enablecompl,out=bit8way);

And(x=bit8or,y=not8way,out=compt);
And(x=notload,y=compt,out=complete, out=compl);
And(x=s7,y=sel,out=sout0);
And(x=true,y=x7,out=souttemp);
And(x=souttemp,y=compl,out=sout1);

Mux(y=or8out,x=enable,sel=bit8way,out=sel);

Or(x=compl,y=enable,out=enablecompl);
Or(x=sout0,y=sout1,out=sout);

}